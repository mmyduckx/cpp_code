//HW7 by Wanxiang Xie
//SU Net ID: wxie15  SUID: 408358088
#include <iostream>
#include <vector>
#include <math.h>
using namespace std;

class Htree {
public:

	Htree();
	Htree(int n);
	void drawH(int x, int y);
	void plot(int n, int x, int y);
	void drawplot();
	void print();
	void connect(int x1, int y1, int x2, int y2);
	int level;

	vector<vector<char>>p;
};

//default consturctor level is 3 given by default
Htree::Htree() {
	int x, y;
	level = 3;
	int n = level;
	if (n % 2 == 0) {
		x = 3 * (int)pow(2, n / 2 - 1) - 1;
		y = 3 * (int)pow(2, n / 2) - 1;
	}
	else
	{
		x = y = 3 * (int)pow(2, (n - 1) / 2) - 1;
	}
	//cout << "create  space for " << "(" << x << "," << y << ")" << endl;
	//cout << "row is " << x << " col is " << y << endl;
	for (int i = 0; i < y; i++) {
		p.push_back(vector<char>(x, ' '));
	}
}

//overloading consturctor level is n given by parameter
Htree::Htree(int n) {
	level = n;
	int x, y;
	if (n % 2 == 0) {
		x = 3 * (int)pow(2, n / 2 - 1) - 1;
		y = 3 * (int)pow(2, n / 2) - 1;
	}
	else
	{
		x = y = 3 * (int)pow(2, (n - 1) / 2) - 1;
	}
	//cout << "create  space for " << "(" << x << "," << y << ")" << endl;
	//cout << "row is " << x << " col is " << y << endl;
	for (int i = 0; i < y; i++) {
		p.push_back(vector<char>(x, ' '));
	}
}

//draw plot when level is 3
void Htree::drawH(int x, int y)
{
	int index_x = x - 1;
	int index_y = y - 1;

	p[index_y - 2][index_x - 2] = 'o';
	p[index_y - 2][index_x + 2] = 'o';
	p[index_y - 1][index_x - 2] = '|';
	p[index_y - 1][index_x + 2] = '|';
	p[index_y][index_x - 2] = 'o';
	p[index_y][index_x - 1] = '-';
	p[index_y][index_x] = 'o';
	p[index_y][index_x + 1] = '-';
	p[index_y][index_x + 2] = 'o';
	p[index_y + 1][index_x - 2] = '|';
	p[index_y + 1][index_x + 2] = '|';
	p[index_y + 2][index_x - 2] = 'o';
	p[index_y + 2][index_x + 2] = 'o';

}

//connect each two binary tree
void Htree::connect(int x1, int y1, int x2, int y2)
{
	if (x1 == x2) {
		int index_x = x1 - 1;
		int index_y1 = y1;
		int index_y2 = y2 - 1;

		for (int i = index_y1; i < index_y2; i++) {
			if (i == (y1 + y2) / 2 - 1) {
				p[i][index_x] = 'o';
			}
			else
			{
				p[i][index_x] = '|';
			}
		}
	}
	else
	{
		int index_y = y1 - 1;
		int index_x1 = x1;
		int index_x2 = x2 - 1;

		for (int i = index_x1; i < index_x2; i++)
		{
			if (i == (x1 + x2) / 2 - 1) {
				p[index_y][i] = 'o';
			}
			else
			{
				p[index_y][i] = '-';
			}
		}
	}
}

//construct plot when level is n using recursively
void Htree::plot(int n, int x, int y) {
	if (n <= 3) {
		drawH(x, y);
		return;
	}
	//calculate x1,x2,y1,y2
	int x1, x2, y1, y2;
	if (n % 2 == 0) {
		x1 = x2 = x;
		y1 = y - 3 * (int)pow(2, n / 2 - 2);
		y2 = y + 3 * (int)pow(2, n / 2 - 2);
	}
	else {
		x1 = x - 3*(int)pow(2, (n - 1) / 2 -2);
		x2 = x + 3*(int)pow(2, (n - 1) / 2 -2);
		y1 = y2 = y;
	}
	//cout << "x1,y1 " << "(" << x1 << "," << y1 << ")" << endl;
	//cout << "x2,y2 " << "(" << x2 << "," << y2 << ")" << endl;
	plot(n - 1, x1, y1);
	plot(n - 1, x2, y2);
	//connect two plot
	connect(x1, y1, x2, y2);
}

//draw n level binary tree's plot 
void Htree::drawplot()
{	
	int x, y;
	if (level % 2 == 0) {
		x = 3 * (int)pow(2, level / 2 - 2);
		y = 3 * (int)pow(2, level / 2 - 1);
	}
	else
	{
		x = y = 3 * (int)pow(2, (level - 2) / 2);
	}

	plot(level, x, y);
	print();
}

void Htree::print()
{
	cout << level << endl;

	for (auto i : p) {
		for (auto j : i) {
			cout << j;
		}
		cout << endl;
	}
}


int main() {
	Htree t0;
	t0.drawplot();  //level is 3 by default
	Htree t1(4);	
	t1.drawplot();
	Htree t2(5);
	t2.drawplot();
	Htree t3(6);
	t3.drawplot();
	Htree t4(7);
	t4.drawplot();
	Htree t5(8);
	t5.drawplot();
	return 0;

}
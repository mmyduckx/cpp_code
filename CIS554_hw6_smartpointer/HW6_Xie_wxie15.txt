//HW6 by Wanxiang Xie
//SU Net ID: wxie15  SUID: 408358088
//CIS554 HW6   Due: 11:59PM, Friday, Nov. 8.
#include <iostream>
#include <memory>
#include <math.h>

using namespace std;

class node {
public:
	int value;
	shared_ptr<node> right;
	shared_ptr<node> l_child;
	shared_ptr<node> r_child;
	node() {}
	node(int i) { value = i; }
};

class tree {
public:
	shared_ptr<node> root;
	int level;
	tree() { level = 0; }

	//Implement all member functions below
	tree(int n);//constructor for n-level tree
	//and initilize values as shown in the diagram; 0, 1, 2, ...
	//Note that root node is at level 1 and its value will be initialized to 0

	tree(const tree& T);//copy constructor
	~tree();//destructor
	tree(tree&& T); //move constructor

	tree(const initializer_list<int>& V);//The first number in V is tree level;
	//the rest are values from top to bottom and from left to right
	//For example, to create the tree with n=3 in the diagram,
	//tree T1 = {3, 0,1,2,3,4,5,6}; //where the first 3 is tree level, and the rest are values

	void operator= (const tree& R);//L-value operator=
	void operator= (tree&& R); //R-value operator=


	tree ThreeTimes(); //return a tree with all node value being three times
	friend ostream& operator<<(ostream& str, const tree& T);

	int sum(shared_ptr<node> p);//sum of node values in sub-tree rooted at p
	void delete_level(int i); // Delete nodes at level i. Some nodes at level(s) higher
	//than i will also be deleted accordingly. As described in class.  (Also see the
	//example in the main function.)

	shared_ptr<node> find(int i); //find the first node with value i and return
	//its address; if not found, return nullptr;
};

tree::tree(int n) {
	
	if (n < 0) return;
	if (n == 0) { level = 0; return; }
	level = n;
	int nums = (int)pow(2, n) - 1;
	shared_ptr<node> p;
	for (int i = 0; i < nums; i++) {
		if (i == 0) {
			p = make_shared<node>(i);
			root = p;
		}
		else {
			p->right = make_shared<node>(i);
			p = p->right;
		}
		p->right = root;
	}

	if (n > 1) {
		shared_ptr<node> p = root;
		int m = (int)pow(2, n - 1) - 1;
		//assign lchild&rchild
		for (int i = 0; i < m; i++) {
			//2*i +1  //2*i + 2
			shared_ptr<node> p_lchild = root;
			shared_ptr<node> p_rchild = root;
			for (int j = 0; j < 2 * i + 1; j++) {
				p_lchild = p_lchild->right;
			}
			for (int j = 0; j < 2 * i + 2; j++) {
				p_rchild = p_rchild->right;
			}
			p->l_child = p_lchild;
			p->r_child = p_rchild;
			p = p->right;
		}
	}
}

tree::tree(const tree& T) :tree(T.level)
{
	if (T.root) {
		root = T.root;
		shared_ptr<node> p = root;
		shared_ptr<node> p1 = T.root;
		for (int i = 0; i < pow(2, T.level) - 1; i++) {
			p->value = p1->value;
			p = p->right;
			p1 = p1->right;
		}
	}
}

tree::~tree()
{
	if (root) {
		root->l_child.reset();
		root->r_child.reset();
		root->right.reset();
		root.reset();
	}
}

tree::tree(tree&& T)
{
	level = T.level;
	root = T.root;
	T.root.reset();
}

tree::tree(const initializer_list<int>& V) :tree() {
	if (V.size() > 0) {
		level = *V.begin();

		auto it = V.begin() + 1;

		size_t nums = V.size() - 1;
		shared_ptr<node> p;
		for (size_t i = 0; i < nums; i++) {
			if (i == 0) {
				p = make_shared<node>(*it);
				root = p;
			}
			else {
				p->right = make_shared<node>(*it);
				p = p->right;
			}
			p->right = root;
			it++;
		}

		if (level > 1) {
			shared_ptr<node> p = root;
			int m = (int)pow(2, level - 1) - 1;
			//assign lchild&rchild
			for (int i = 0; i < m; i++) {
				//2*i +1  //2*i + 2
				shared_ptr<node> p_lchild = root;
				shared_ptr<node> p_rchild = root;
				for (int j = 0; j < 2 * i + 1; j++) {
					p_lchild = p_lchild->right;
				}
				for (int j = 0; j < 2 * i + 2; j++) {
					p_rchild = p_rchild->right;
				}
				p->l_child = p_lchild;
				p->r_child = p_rchild;
				p = p->right;
			}
		}

	}
}

void tree::operator=(const tree& R)
{
	if (root) {
		root->l_child.reset();
		root->r_child.reset();
		root->right.reset();
		root.reset();
	}
	level = R.level;
	if (level > 0) {

		int nums = (int)pow(2, level) - 1;
		shared_ptr<node> p;
		shared_ptr<node> p1 = R.root;
		for (int i = 0; i < nums; i++) {
			if (i == 0) {
				p = make_shared<node>(*p1);
				root = p;
				p1 = p1->right;
			}
			else {
				p->right = make_shared<node>(*p1);
				p = p->right;
				p1 = p1->right;
			}
			p->right = root;
		}

		if (level > 1) {
			shared_ptr<node> p = root;
			int m = (int)pow(2, level - 1) - 1;
			//assign lchild&rchild
			for (int i = 0; i < m; i++) {
				//2*i +1  //2*i + 2
				shared_ptr<node> p_lchild = root;
				shared_ptr<node> p_rchild = root;
				for (int j = 0; j < 2 * i + 1; j++) {
					p_lchild = p_lchild->right;
				}
				for (int j = 0; j < 2 * i + 2; j++) {
					p_rchild = p_rchild->right;
				}
				p->l_child = p_lchild;
				p->r_child = p_rchild;
				p = p->right;
			}
		}
	}

}

void tree::operator=(tree&& R)
{
	if (root) {
		root->l_child.reset();
		root->r_child.reset();
		root->right.reset();
		root.reset();
	}
	level = R.level;
	root = R.root;
	R.root.reset();

}

tree tree::ThreeTimes()
{
	tree t_three(level);
	if (level > 0) {
		shared_ptr<node> p = root;
		shared_ptr<node> p3 = t_three.root;
		for (int i = 0; i < pow(2, level) - 1; i++) {
			p3->value = p->value * 3;
			p = p->right;
			p3 = p3->right;
		}
	}
	return t_three;
}

int tree::sum(shared_ptr<node> p)
{
	if (!p) return 0;

	int sums = p->value + sum(p->l_child) + sum(p->r_child);
	
	return sums;

}

void tree::delete_level(int i)
{
	if (i == 1) {
		if (level == 1) {
			root->right.reset();
			root.reset();
			return;
		}
		else { // level > 1
			shared_ptr<node> p1 = root;
			shared_ptr<node> p2 = root;
			shared_ptr<node> p3 = root;
			int m = 0;

			while (p1->l_child) {
				int k = pow(2, m) - 1;
				int j = pow(2, m + 1) - 1;
				p1 = p1->l_child;
				if (!p1) break;
				p2 = p1;
				p3 = p1;
				while (k > 0) {
					p2 = p2->right;
					k--;
				}

				while (j> 0) {
					p3 = p3->right;
					j--;
				}
				m++;
				p2->right = p3->right;

			}

			root = root->l_child;
			p2->right = root;

			level--;
		}
	}
	else if (i > 1 && i < level) { //level > 1
		shared_ptr<node> p1 = root;
		shared_ptr<node> p2 = root;
		shared_ptr<node> p0 = root;
		shared_ptr<node> p4 = root;
		int m = pow(2, i- 2) -1;  // 1
		int n = pow(2, i) - 1; // 7
		int p = pow(2, i - 1) - 1; // 3
		for (int j = 0; j < m; j++) {
			p1 = p1->right;
		}
		//cout << p1->value << endl; //33
		for (int j = 0; j < n; j++) {
			p2 = p2->right;
		}
		//cout << p2->value << endl; //51

		for (int j = 0; j < p; j++) {
			p0 = p0->right;
		}
		//cout << p0->value << endl; // 39

		p4 = p1;
		for (int j = 0; j < m; j++) {
			p4 = p4->right;
		}
		//cout << p4->value << endl; //36

		//step0
		p4->right = p2;
		//cout << *this;
		//step 1
		for (int j = 0; j < pow(2, i - 2); j++) {
			p1->l_child = p1->l_child->l_child;
			p1->r_child = p1->r_child->l_child;
		/*	cout << "p1:" << p1->value << " ";
			cout << p1->l_child->value << " " << p1->r_child->value << " ";*/
			p1 = p1->right;
		}

		//step 2
		p1 = root;
		for (int j = 0; j < m; j++) {
			p1 = p1->right;
		}
		//cout << p1->value << endl; //33
		for (int j = 0; j < pow(2, i - 2); j++) {
			p1->l_child->right = p1->r_child;
			p1->r_child->right = p1->right->l_child;

			p1 = p1->right;
		}
		//cout << endl;
		while (p2) {
			if (p2->l_child && p2->r_child) {
				p2->l_child->right = p2->r_child;
				p2->r_child->right = p2->right->l_child;
			}
			//cout << p2->value<< " ";
			if (p2->right)
				p2 = p2->right;
			else {
				p2->right = root;
				p2 = p2->right;
				break;
			}
		}
		p4.reset();
		p1.reset();
		p2.reset();
		p0.reset();
		level--;

	}
	else if(i == level) {
		shared_ptr<node> p1 = root;
		shared_ptr<node> p2 = root;
		int m = pow(2, i - 2) - 1;  // 3
		int n = pow(2, i - 1) - 2; // 6
		for (int j = 0; j < m; j++) {
			p1 = p1->right;
		}
		//cout << p1->value << endl; //39
		for (int j = 0; j < n; j++) {
			p2 = p2->right;
		}
		//cout << p2->value << endl; //48
		p2->right = root;
		p1->l_child.reset();
		p1->r_child.reset();
		level--;
	}
	else {}
}

shared_ptr<node> tree::find(int i)
{
	if (!root) return nullptr;
	shared_ptr<node> p = root;

	do {
		if (p->value == i)
			return p;
		else {
			p = p->right;
		}
	}
	while (p != root);

	return nullptr;

}

ostream& operator<<(ostream& str, const tree& T) {
	if (T.root) {
		shared_ptr<node> p = T.root;
		for (int i = 0; i < pow(2, T.level) - 1; i++) {
			str << p->value << " ";
			p = p->right;
		}
	}
	return str;
}


int main() {
	tree T1(3);

	cout << T1 << endl; //will print 0 1 2 3 4 5 6

	tree T2 = { 4, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 };
	cout << T2 << endl; //will print 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24

	tree T3(T2);
	cout << T3 << endl; //will print 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24

	tree T4;
	T4 = T3;
	cout << T4 << endl; //will print 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24

	T4 = T3.ThreeTimes();
	cout << T4 << endl;//will print 30 33 36 39 42 45 48 51 54 57 60 63 66 69 72

	T4.delete_level(3);
	cout << T4 << endl;//will print 30 33 36 51 57 63 69

	cout << T3.sum(T3.find(12)) << endl; //will print 133

	getchar();
	getchar();
	return 0;
}